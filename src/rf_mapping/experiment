import os


import numpy as np
from pathlib import Path
from torchvision import models
import matplotlib.pyplot as plt
import matplotlib.patches as patches
%matplotlib inline


from hook import SpatialIndexConverter

model = models.alexnet(pretrained=True)
model_name = "alexnet"
result_dir = Path(__file__).parent.parent.parent.joinpath(f'results/ground_truth/{model_name}')
converter = SpatialIndexConverter(model, (227, 227))

layer_name = "conv2"
layer_idx = 0
result_path = os.path.join(result_dir, f"{layer_name}.npy")

conv_results = np.load(result_path).astype(int)  # [units * top_n_img * [max_img_idx, max_idx, min_img_idx, min_idx]]

def make_box(box_indicies):
    vx_min, hx_min, vx_max, hx_max = box_indicies
    lower_left = (vx_min, hx_max)
    height = vx_max - vx_min + 1
    width = hx_max - hx_min + 1
    rect = patches.Rectangle(lower_left, width, height, linewidth=1, edgecolor='r', facecolor='none')
    return rect


top_n = 5
unit_idx = 0
img_dir = "/Users/tonyfu/Desktop/Bair Lab/top_and_bottom_images/images"
fig, ax = plt.subplots()
fig.set_facecolor('w')
fig.set_size_inches(10,20)
for i, img_idx in enumerate(conv_results[unit_idx, :top_n, 0]):
    plt.subplot(5,2,2*i + 1)
    img_path = os.path.join(img_dir, f"{img_idx}.npy")
    img = np.load(img_path)
    img = np.transpose(img,(1,2,0))
    plt.imshow(img)
    plt.title(f"top {i+1} image")
    plt.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)
    
    patch_index = conv_results[unit_idx, i, 1]
    box_indicies = converter.convert(patch_index, layer_idx, 0, is_forward=False)
    ax.add_patch(make_box((100, 100, 120, 120)))

for i, img_idx in enumerate(conv_results[unit_idx, :top_n, 2]):
    plt.subplot(5,2,2*i + 2)
    img_path = os.path.join(img_dir, f"{img_idx}.npy")
    img = np.load(img_path)
    img = np.transpose(img,(1,2,0))
    plt.imshow(img)
    plt.title(f"bottom {i+1} image")
    plt.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)
    
plt.show()